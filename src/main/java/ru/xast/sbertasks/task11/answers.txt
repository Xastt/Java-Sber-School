1. Как получить ссылку на текущий поток?
   Для получения ссылки на текущий поток используют метод `Thread.currentThread()`,
   который возвращает объект Thread - текущий выполняющийся поток.

2. Зачем нужно ключевое слово synchronized? На что его можно вещать (поле, метод, класс, конструктор)?
   Ключевое слово synchronized используется для обеспечения синхронизации доступа к разделенным ресурсам. Его можно использовать для:
   - методов (synchronized void methodName())
   - статических методов (synchronized static void methodName())
   - блоков кода (`synchronized (object) { ... }`)

3. Захват какого монитора происходит при входе в synchronized метод/статик метод/блок?
   При входе в synchronized метод захватывается монитор объекта, на который ссылается этот метод.
   Для синхронизированного блока захватывается монитор объекта, указанный в скобках.

4. Зачем нужно ключевое слово volatile? На что его можно вещать (поле, метод, класс, конструктор)?
   Необходимо для случаев, когда одна переменная делится между нескольккими потоками. Гарантирует видимость
   изменений сделанных одним потоком, другим потокам, а также упорядочивает обращение к таким переменным.
   `volatile` можно применять только к полям (переменным экземпляра или статическим).

5. Что делает метод Object#wait, Object#notify, Object#notifyAll?
   - wait(): освобождает монитор и заставляет текущий поток ждать, пока другой поток не вызовет notify() или notifyAll().
   - notify(): пробуждает один поток, ожидающий на этом объекте.
   - notifyAll(): пробуждает все потоки, ожидающие на этом объекте.

6. Что за исключение IllegalMonitorStateException?
   Выбрасывается, когда поток пытается вызвать методы wait(),
   notify(), или notifyAll() на объекте, которому он не принадлежит, то есть, когда поток
   не владеет монитором объекта.

7. Что делает метод Thread#join?
   Заставляет текущий поток ожидать завершения потока, на котором он был вызван.
   Если поток t вызывает t.join(), то выполнение текущего потока будет приостановлено до тех пор, пока поток t не завершится.

8. Что делает метод Thread#interrupt?
   Используется для установки флага прерывания у данного потока.
   Если поток находится в состоянии ожидания (например, при вызове wait(), sleep(), или join()),
   он будет разбужен и получит InterruptedException. Если поток не находится в ожидании,
   флаг прерывания просто устанавливается, и поток может проверять этот флаг с помощью метода Thread.isInterrupted().

